{"version":3,"sources":["components/redux/actions/types.js","components/redux/reducers/todoReducer.js","components/redux/reducers/index.js","components/redux/store/index.js","components/appBar/appBar.js","components/redux/actions/todoAction.js","components/dashboard/ListView.js","components/dashboard/dashboard.js","App.js","serviceWorker.js","index.js"],"names":["SET_TODO","initialState","todoList","todoReducer","state","actions","type","payload","combineReducers","todo","middleware","thunk","store","createStore","rootReducer","composeWithDevTools","applyMiddleware","useStyles","makeStyles","theme","root","flexGrow","menuButton","marginRight","spacing","title","ButtonAppBar","classes","className","AppBar","position","Toolbar","IconButton","edge","color","aria-label","Typography","variant","Button","addToDo","data","dispatch","error","console","paperListView","padding","textAlign","palette","text","secondary","margin","marginTop","button","ListView","props","listView","Paper","component","Grid","description","duedate","paper","paperList","connect","useDispatch","useState","dataList","formData","setFormData","onChange","e","target","name","value","container","justify","item","sm","md","autoComplete","onSubmit","preventDefault","push","TextField","required","fullWidth","label","multiline","helperText","size","startIcon","List","style","width","length","map","index","ListItem","ListItemText","primary","ListItemSecondaryAction","onClick","splice","onDeleteClick","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.f21f9452.chunk.js","sourcesContent":["export const SET_TODO='SET_TODO';\n","import { SET_TODO } from \"../actions/types\";\nconst initialState = {\n  todoList: [],\n};\n\nconst todoReducer = (state = initialState, actions) => {\n  const { type, payload } = actions;\n  switch (type) {\n    case SET_TODO:\n      return {\n        ...state,\n        todoList: payload,\n      };\n    default:\n      return state;\n  }\n}\nexport default  todoReducer;","import { combineReducers } from 'redux';\nimport todo from './todoReducer';\n\nexport default combineReducers({\n  todo\n});","import { createStore, applyMiddleware } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\nimport rootReducer from '../reducers';\n\nconst initialState = {};\n\nconst middleware = [thunk];\n\nconst store = createStore(\n  rootReducer,\n  initialState,\n  composeWithDevTools(applyMiddleware(...middleware))\n);\n\nexport default store;","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport Button from '@material-ui/core/Button';\nimport IconButton from '@material-ui/core/IconButton';\nimport MenuIcon from '@material-ui/icons/Menu';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    flexGrow: 1,\n  },\n  menuButton: {\n    marginRight: theme.spacing(2),\n  },\n  title: {\n    flexGrow: 1,\n  },\n}));\n\nexport default function ButtonAppBar() {\n  const classes = useStyles();\n\n  return (\n    <div className={classes.root}>\n      <AppBar position=\"static\">\n        <Toolbar>\n          <IconButton edge=\"start\" className={classes.menuButton} color=\"inherit\" aria-label=\"menu\">\n            <MenuIcon />\n          </IconButton>\n          <Typography variant=\"h6\" className={classes.title}>\n            TO DO'S Dashboard\n          </Typography>\n          <Button color=\"inherit\">Login</Button>\n        </Toolbar>\n      </AppBar>\n    </div>\n  );\n}","\nimport { SET_TODO } from './types';\n\nexport const addToDo = data => dispatch => {\n\n  try {\n    dispatch({\n      type: SET_TODO,\n      payload: data\n    });\n    return true;\n  } catch (error) {\n    console.error(error);\n  }\n\n};\n","import React from 'react';\nimport { Grid, Paper, Typography } from '@material-ui/core';\n\nimport { makeStyles } from '@material-ui/core/styles';\nconst useStyles = makeStyles((theme) => ({\n\n    paperListView: {\n        padding: \"20px\",\n        textAlign: 'left',\n        color: theme.palette.text.secondary,\n        margin: \"20px 20px 0px 0px\"\n    },\n    margin: {\n        marginTop: theme.spacing(3),\n    },\n    button: {\n        marginTop: theme.spacing(3),\n        margin: theme.spacing(1),\n    },\n}));\nconst ListView = (props) => {\n    const classes = useStyles();\n    const { listView } = props\n    return (\n        <Paper className={classes.paperListView}>\n            <Typography variant='h5' component=\"h4\">TO DO Details</Typography>\n\n            {listView && (\n                <Grid>\n                    <Typography component=\"p\"><strong>Title: </strong> {listView.title}</Typography>\n                    <Typography component=\"p\"><strong>Description: </strong> {listView.description}</Typography>\n                    <Typography component=\"p\"><strong>Due Date: </strong> {listView.duedate}</Typography>\n                </Grid>\n            )}\n        </Paper>\n    )\n};\nexport default ListView;","import React, { useState } from \"react\";\nimport {\n  Grid,\n  Paper,\n  TextField,\n  Typography,\n  Button,\n  List,\n  ListItem,\n  ListItemText,\n  ListItemSecondaryAction,\n  IconButton,\n} from \"@material-ui/core\";\nimport ButtonAppBar from \"../appBar/appBar\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport SaveIcon from \"@material-ui/icons/Save\";\nimport { addToDo } from \"./../redux/actions/todoAction\";\nimport { connect, useDispatch } from \"react-redux\";\nimport VisibilityIcon from \"@material-ui/icons/Visibility\";\nimport DeleteIcon from \"@material-ui/icons/Delete\";\nimport ListView from \"./ListView\";\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    marginTop: theme.spacing(2),\n    flexGrow: 1,\n  },\n  paper: {\n    padding: theme.spacing(2),\n    textAlign: \"center\",\n    color: theme.palette.text.secondary,\n    margin: \"20px 0px 0px 20px\",\n  },\n  paperList: {\n    textAlign: \"center\",\n    color: theme.palette.text.secondary,\n    margin: \"20px 0px 0px 20px\",\n  },\n  paperListView: {\n    padding: \"20px\",\n    textAlign: \"left\",\n    color: theme.palette.text.secondary,\n    margin: \"20px 20px 0px 0px\",\n  },\n  margin: {\n    marginTop: theme.spacing(3),\n  },\n  button: {\n    marginTop: theme.spacing(3),\n    margin: theme.spacing(1),\n  },\n}));\nconst Dashboard = (props) => {\n  const classes = useStyles();\n  const dispatch = useDispatch();\n  const [formData, setFormData] = useState({\n    dataList: props.todoList,\n    title: \"\",\n    description: \"\",\n    duedate: \"dd-mm-yyyy\",\n    listView: \"\",\n  });\n  const { title, description, duedate, dataList, listView } = formData;\n  const onChange = (e) => {\n    const { name, value } = e.target;\n    setFormData({ ...formData, [name]: value });\n  };\n\n  const onSubmit = (e) => {\n    e.preventDefault();\n    dataList.push({ title, description, duedate });\n    const result = dispatch(addToDo(dataList));\n    result &&\n      setFormData({ ...formData, title: \"\", description: \"\", duedate: \"\" });\n  };\n  const onViewClick = (value) => {\n    setFormData({ ...formData, listView: dataList[value] });\n  };\n  const onDeleteClick = (index) => {\n    if (index > -1) {\n      dataList.splice(index, 1);\n      setFormData({\n        ...formData,\n        dataList,\n        listView: dataList[index - 1 || index + 1],\n      });\n      dispatch(addToDo(dataList));\n    }\n  };\n  return (\n    <div className={classes.root}>\n      <ButtonAppBar />\n      <Grid container spacing={1} justify=\"space-around\">\n        <Grid item sm={6} md={6}>\n          <Paper className={classes.paper}>\n            <Typography variant=\"h5\" component=\"h4\">\n              Add to dos\n            </Typography>\n\n            <form autoComplete=\"off\" onSubmit={onSubmit}>\n              <TextField\n                required\n                fullWidth\n                className={classes.margin}\n                onChange={onChange}\n                value={title}\n                name=\"title\"\n                label=\"Title\"\n              />\n              <br />\n              <TextField\n                required\n                fullWidth\n                multiline\n                className={classes.margin}\n                onChange={onChange}\n                value={description}\n                name=\"description\"\n                label=\"Description\"\n              />\n              <TextField\n                fullWidth\n                type=\"date\"\n                className={classes.margin}\n                value={duedate}\n                onChange={onChange}\n                name=\"duedate\"\n                label=\"Due date\"\n                helperText=\"dd-mmm-yyyy\"\n              />\n              <Button\n                type=\"submit\"\n                variant=\"contained\"\n                color=\"primary\"\n                size=\"large\"\n                className={classes.button}\n                startIcon={<SaveIcon />}\n              >\n                Save\n              </Button>\n            </form>\n          </Paper>\n          <Grid container justify=\"space-around\">\n            <List style={{ width: \"100%\" }}>\n              {dataList.length > 0 &&\n                dataList.map((item, index) => {\n                  return (\n                    <Paper\n                      key={index}\n                      className={classes.paperList}\n                      variant=\"outlined\"\n                    >\n                      <ListItem style={{ width: \"100%\" }}>\n                        <ListItemText primary={item.title} />\n                        <ListItemSecondaryAction>\n                          <IconButton\n                            color=\"primary\"\n                            aria-label=\"visibility\"\n                            onClick={() => onViewClick(index)}\n                          >\n                            <VisibilityIcon />\n                          </IconButton>\n                          <IconButton\n                            edge=\"end\"\n                            color=\"secondary\"\n                            aria-label=\"delete\"\n                            onClick={() => onDeleteClick(index)}\n                          >\n                            <DeleteIcon />\n                          </IconButton>\n                        </ListItemSecondaryAction>\n                      </ListItem>\n                    </Paper>\n                  );\n                })}\n            </List>\n          </Grid>\n        </Grid>\n        <Grid item sm={6} md={6}>\n          <ListView listView={listView} />\n        </Grid>\n      </Grid>\n    </div>\n  );\n};\n\nconst mapStateToProps = (state) => {\n  const todoList = state.todo && state.todo.todoList;\n  return { todoList };\n};\nexport default connect(mapStateToProps)(Dashboard);\n// export default Dashboard;\n","import React, { Fragment } from 'react';\nimport { Provider } from 'react-redux';\n\nimport store from './components/redux/store';\nimport Dashboard from './components/dashboard/dashboard';\n\nconst App = () => {\n\treturn (\n\t\t<Fragment>\n\t\t\t<Provider store={store}>\n\t\t\t\t<Dashboard />\n\t\t\t</Provider>\n\t\t</Fragment>\n\t);\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}